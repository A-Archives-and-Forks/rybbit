version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/templates:/etc/nginx/templates # Mount template directory
      - certbot-conf:/etc/letsencrypt # Mount cert volume
      - certbot-www:/var/www/certbot # Mount webroot volume for challenges
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME} # Pass domain name from .env
    command: /entrypoint.sh # Explicitly run entrypoint
    depends_on:
      - backend
      - client
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-conf:/etc/letsencrypt # Mount cert volume
      - certbot-www:/var/www/certbot # Mount webroot volume for challenges
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
    command: >
      sh -c "
        echo 'Waiting for Nginx to start...' && sleep 10s;
        # Check if CERTBOT_EMAIL is set and non-empty
        if [ -n \"${CERTBOT_EMAIL}\" ]; then
          email_arg=\" --email ${CERTBOT_EMAIL} --no-eff-email \"
        else
          email_arg=\" --register-unsafely-without-email \"
          echo 'Warning: Running Certbot without an email address. You will not receive expiration notices.'
        fi;
        echo \"Attempting to obtain/renew certificate for ${DOMAIN_NAME} using args: ${email_arg}\" &&
        certbot certonly --webroot -w /var/www/certbot -d ${DOMAIN_NAME} \
          ${email_arg} --agree-tos --keep-until-expiring --non-interactive \
          --rsa-key-size 4096 --preferred-challenges http-01 \
          || echo 'Initial certbot run failed or certificate already exists.';
        echo 'Starting Certbot renewal loop...' &&
        trap exit TERM;
        while :; do
          echo '[$(date)] Running certbot renew...' && certbot renew --webroot -w /var/www/certbot --quiet;
          sleep 12h & wait $${!};
        done;
      "
    depends_on:
      - nginx
    restart: unless-stopped

  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=frog
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: frog
      POSTGRES_PASSWORD: frog
      POSTGRES_DB: analytics
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  backend:
    container_name: backend
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_HOST=http://clickhouse:8123
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_PASSWORD=frog
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=analytics
      - POSTGRES_USER=frog
      - POSTGRES_PASSWORD=frog
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BASE_URL=${BASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - CLOUD=${CLOUD}
    depends_on:
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_started
    restart: unless-stopped

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: ${BASE_URL}
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${BASE_URL}
      - CLOUD=${CLOUD}
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  clickhouse-data:
  postgres-data:
  certbot-conf: # Volume for Let's Encrypt certificates
  certbot-www:  # Volume for ACME challenges
